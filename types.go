package atreugo

import (
	"time"

	"github.com/fasthttp/router"
	"github.com/savsgio/go-logger"
	"github.com/valyala/fasthttp"
)

// private

// public

// Config config for Atreugo
type Config struct {
	Host      string
	Port      int
	LogLevel  string
	TLSEnable bool
	CertKey   string
	CertFile  string

	// Compress transparently the response body generated by handler if the request contains 'gzip' or 'deflate'
	// in 'Accept-Encoding' header.
	Compress bool

	// Shutdown gracefully shuts down the server without interrupting any active connections.
	// Shutdown works by first closing all open listeners and then waiting indefinitely for all connections to return to idle and then shut down.
	GracefulShutdown bool

	// Server name for sending in response headers.
	//
	// Default server name is used if left blank.
	Name string

	// Maximum duration for reading the full request (including body).
	//
	// This also limits the maximum duration for idle keep-alive
	// connections.
	//
	// By default request read timeout is unlimited if Graceful Shutdown is set to false,
	// unless will use the default ReadTimeout
	ReadTimeout time.Duration
}

// Atreugo struct for make up a server
type Atreugo struct {
	lnAddr string

	server      *fasthttp.Server
	router      *router.Router
	middlewares []Middleware
	log         *logger.Logger
	cfg         *Config
}

// RequestCtx context wrapper for fasthttp.RequestCtx to adds extra funtionality
type RequestCtx struct {
	*fasthttp.RequestCtx
}

// View must process incoming requests.
type View func(ctx *RequestCtx) error

// Middleware must process all incoming requests before defined views.
type Middleware func(ctx *RequestCtx) (int, error)

// JSON is a map whose key is a string and whose value an interface
type JSON map[string]interface{}
